services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: taskmanager
      POSTGRES_PASSWORD: taskmanager
      POSTGRES_DB: taskmanager
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U taskmanager" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://taskmanager:taskmanager@postgres:5432/taskmanager
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      GEMINI_API_KEY: your_gemini_api_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://taskmanager:taskmanager@postgres:5432/taskmanager
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./worker/app:/app/app

#  celery-beat:
#    build:
#      context: ./worker
#      dockerfile: Dockerfile
#    environment:
#      DATABASE_URL: postgresql://taskmanager:taskmanager@postgres:5432/taskmanager
#      REDIS_URL: redis://redis:6379/0
#      CELERY_BROKER_URL: redis://redis:6379/0
#      CELERY_RESULT_BACKEND: redis://redis:6379/0
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    volumes:
#      - ./worker/app:/app/app
#    command: celery -A app.celery_worker beat --loglevel=info